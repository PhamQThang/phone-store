generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  password        String
  roleId          Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  address         String?
  phoneNumber     String?
  isActive        Boolean?          @default(true)
  deletedAt       DateTime?         @db.Timestamp(6)
  fullName        String?
  cart            Cart?             @relation("UserCart")
  orders          Order[]
  returns         ProductReturn[]
  reviews         ProductReview[]
  purchaseOrders  PurchaseOrder[]   @relation("CreatedBy")
  returnTicket    ReturnTicket[]
  role            Role              @relation(fields: [roleId], references: [id])
  warranties      Warranty[]
  warrantyRequest WarrantyRequest[]

  @@index([createdAt])
  @@index([email])
  @@index([roleId])
  @@index([updatedAt])
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  users     User[]

  @@index([createdAt])
  @@index([name])
  @@index([updatedAt])
}

model Supplier {
  id             String          @id @default(uuid())
  name           String
  address        String
  phone          String          @unique
  email          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  purchaseOrders PurchaseOrder[]

  @@index([createdAt])
  @@index([phone])
  @@index([updatedAt])
}

model PurchaseOrder {
  id                   String                @id @default(uuid())
  supplierId           String
  importDate           DateTime              @default(now())
  totalCost            Int
  status               String                @default("Pending")
  note                 String?
  createdById          Int?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt
  createdBy            User?                 @relation("CreatedBy", fields: [createdById], references: [id])
  supplier             Supplier              @relation(fields: [supplierId], references: [id])
  purchaseOrderDetails PurchaseOrderDetail[]

  @@index([createdAt])
  @@index([createdById])
  @@index([status])
  @@index([supplierId])
  @@index([updatedAt])
}

model PurchaseOrderDetail {
  id                String           @id @default(uuid())
  importId          String
  productId         String
  colorId           String
  productIdentityId String?          @unique
  importPrice       Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  imei              String?          @unique(map: "PurchaseOrderDetail_imei_unique") @db.VarChar(255)
  color             Color            @relation(fields: [colorId], references: [id])
  import            PurchaseOrder    @relation(fields: [importId], references: [id])
  product           Product          @relation(fields: [productId], references: [id])
  productIdentity   ProductIdentity? @relation(fields: [productIdentityId], references: [id])

  @@index([colorId])
  @@index([createdAt])
  @@index([importId])
  @@index([productId])
  @@index([productIdentityId])
  @@index([updatedAt])
}

model ProductIdentity {
  id                  String               @id @default(uuid())
  imei                String               @unique
  colorId             String
  productId           String
  isSold              Boolean              @default(false) @map("is_sold")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  warrantyStartDate   DateTime?            @db.Timestamp(6)
  warrantyEndDate     DateTime?            @db.Timestamp(6)
  warrantyCount       Int                  @default(0)
  orderDetail         OrderDetail[]
  color               Color                @relation(fields: [colorId], references: [id])
  product             Product              @relation(fields: [productId], references: [id])
  returns             ProductReturn[]
  purchaseOrderDetail PurchaseOrderDetail?
  returnTicket        ReturnTicket[]
  warranties          Warranty[]
  warrantyRequest     WarrantyRequest[]

  @@index([imei], map: "idx_product_identity_imei")
  @@index([colorId])
  @@index([productId])
}

model Product {
  id                   String                @id @default(uuid())
  name                 String
  slug                 String                @unique
  price                Int
  storage              Int
  ram                  Int
  screenSize           Float
  battery              Int
  chip                 String
  operatingSystem      String
  modelId              String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt
  warrantyPeriod       Int?                  @default(12)
  cartItems            CartItem[]
  orderDetails         OrderDetail[]
  model                Model                 @relation(fields: [modelId], references: [id])
  productFiles         ProductFiles[]
  productIdentities    ProductIdentity[]
  promotions           ProductPromotion[]
  reviews              ProductReview[]
  purchaseOrderDetails PurchaseOrderDetail[]

  @@index([createdAt])
  @@index([modelId])
  @@index([slug])
  @@index([updatedAt])
}

model Model {
  id        String    @id @default(uuid())
  name      String
  slug      String
  brandId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  brand     Brand     @relation(fields: [brandId], references: [id])
  products  Product[]

  @@unique([name, brandId])
  @@index([brandId])
  @@index([createdAt])
  @@index([slug])
  @@index([updatedAt])
}

model Brand {
  id        String   @id @default(uuid())
  slug      String   @unique
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  models    Model[]

  @@index([createdAt])
  @@index([name])
  @@index([slug])
  @@index([updatedAt])
}

model Color {
  id                   String                @id @default(uuid())
  name                 String                @unique
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt
  cartItems            CartItem[]
  orderDetails         OrderDetail[]
  productIdentities    ProductIdentity[]
  purchaseOrderDetails PurchaseOrderDetail[]

  @@index([createdAt])
  @@index([name])
  @@index([updatedAt])
}

model File {
  id           String         @id @default(uuid())
  url          String
  public_id    String         @unique
  file_type    String         @default("image")
  size         Int?
  uploaded_at  DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  productFiles ProductFiles[]
  slides       Slide[]

  @@index([createdAt])
  @@index([public_id])
  @@index([updatedAt])
}

model ProductFiles {
  productId String
  fileId    String
  isMain    Boolean  @default(false) @map("is_main")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  file      File     @relation(fields: [fileId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([productId, fileId])
  @@index([createdAt])
  @@index([fileId])
  @@index([productId])
  @@index([updatedAt])
}

model Order {
  id            String        @id @default(uuid())
  userId        Int
  address       String
  status        order_status  @default(Pending)
  totalAmount   Int           @map("total_amount")
  note          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  paymentMethod String
  paymentStatus String        @default("Pending")
  phoneNumber   String?       @db.VarChar(15)
  user          User          @relation(fields: [userId], references: [id])
  orderDetails  OrderDetail[]
  payment       Payment?

  @@index([createdAt])
  @@index([paymentStatus])
  @@index([status])
  @@index([updatedAt])
  @@index([userId])
}

model OrderDetail {
  id                String          @id @default(uuid())
  orderId           String
  productId         String
  colorId           String
  productIdentityId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  originalPrice     Float?
  discountedPrice   Float?
  returnStatus      Boolean         @default(false)
  color             Color           @relation(fields: [colorId], references: [id])
  order             Order           @relation(fields: [orderId], references: [id])
  product           Product         @relation(fields: [productId], references: [id])
  productIdentity   ProductIdentity @relation(fields: [productIdentityId], references: [id])

  @@index([productIdentityId])
  @@index([colorId])
  @@index([createdAt])
  @@index([orderId])
  @@index([productId])
  @@index([updatedAt])
}

model Slide {
  id           String   @id @default(uuid())
  title        String?
  imageId      String
  link         String?
  isActive     Boolean  @default(true) @map("is_active")
  displayOrder Int      @default(0) @map("display_order")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  image        File     @relation(fields: [imageId], references: [id])

  @@index([imageId])
}

model BlacklistToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@index([token])
}

model Cart {
  id        String     @id @default(uuid())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  user      User       @relation("UserCart", fields: [userId], references: [id])
  cartItems CartItem[] @relation("CartItems")

  @@index([createdAt])
  @@index([updatedAt])
  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  productId String
  colorId   String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  cartId    String
  cart      Cart     @relation("CartItems", fields: [cartId], references: [id])
  color     Color    @relation(fields: [colorId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, colorId])
  @@index([cartId])
  @@index([colorId])
  @@index([createdAt])
  @@index([productId])
  @@index([updatedAt])
}

model ProductReview {
  id        String   @id @default(uuid())
  userId    Int
  productId String
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([productId])
  @@index([updatedAt])
  @@index([userId])
}

model Promotion {
  id          String             @id @default(uuid())
  code        String             @unique
  description String?
  discount    Int
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean            @default(true) @map("is_active")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now()) @updatedAt
  products    ProductPromotion[]

  @@index([code])
  @@index([endDate])
  @@index([startDate])
}

model ProductPromotion {
  productId   String
  promotionId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  product     Product   @relation(fields: [productId], references: [id])
  promotion   Promotion @relation(fields: [promotionId], references: [id])

  @@id([productId, promotionId])
  @@index([createdAt])
  @@index([productId])
  @@index([promotionId])
  @@index([updatedAt])
}

model Warranty {
  id                String           @id @default(uuid())
  userId            Int
  productIdentityId String
  startDate         DateTime         @default(now())
  endDate           DateTime
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  status            warranty_status?
  note              String?
  warrantyRequestId String?
  productIdentity   ProductIdentity  @relation(fields: [productIdentityId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  warrantyRequest   WarrantyRequest? @relation(fields: [warrantyRequestId], references: [id])

  @@index([createdAt])
  @@index([productIdentityId])
  @@index([status])
  @@index([updatedAt])
  @@index([userId])
  @@index([warrantyRequestId])
}

model ProductReturn {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  userId            Int
  productIdentityId String
  reason            String
  returnDate        DateTime        @default(now())
  createdAt         DateTime        @default(now()) @db.Timestamp(6)
  updatedAt         DateTime        @default(now()) @db.Timestamp(6)
  status            return_status?  @default(Pending)
  fullName          String?
  phoneNumber       String?
  address           String?
  productIdentity   ProductIdentity @relation(fields: [productIdentityId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
  returnTicket      ReturnTicket[]

  @@index([createdAt])
  @@index([productIdentityId])
  @@index([status])
  @@index([updatedAt])
  @@index([userId])
}

model Payment {
  id              String    @id @default(uuid())
  orderId         String    @unique
  amount          Int
  paymentMethod   String
  status          String    @default("Pending")
  transactionId   String?
  transactionDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  order           Order     @relation(fields: [orderId], references: [id])

  @@index([createdAt])
  @@index([orderId])
  @@index([status])
  @@index([updatedAt])
}

model WarrantyRequest {
  id                String                   @id @default(dbgenerated("gen_random_uuid()"))
  userId            Int
  productIdentityId String
  reason            String
  fullName          String
  phoneNumber       String                   @db.VarChar(15)
  address           String
  requestDate       DateTime                 @default(now())
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @default(now())
  status            warranty_request_status? @default(Pending)
  warranty          Warranty[]
  productIdentity   ProductIdentity          @relation(fields: [productIdentityId], references: [id])
  user              User                     @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([productIdentityId])
  @@index([status])
  @@index([updatedAt])
  @@index([userId])
}

model ReturnTicket {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  userId            Int
  productIdentityId String
  startDate         DateTime            @db.Timestamp(6)
  endDate           DateTime            @db.Timestamp(6)
  status            returnticket_status @default(Requested)
  note              String?
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  updatedAt         DateTime            @default(now()) @db.Timestamp(6)
  productReturnId   String
  originalPrice     Float?
  discountedPrice   Float?
  paymentMethod     String?
  paymentStatus     String?
  fullName          String?
  phoneNumber       String?
  address           String?
  productIdentity   ProductIdentity     @relation(fields: [productIdentityId], references: [id])
  productReturn     ProductReturn       @relation(fields: [productReturnId], references: [id])
  user              User                @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@index([productIdentityId])
  @@index([productReturnId])
  @@index([updatedAt])
  @@index([userId])
}

enum order_status {
  Pending
  Confirmed
  Shipping
  Delivered
  Canceled
  Returned
}

enum warranty_status {
  Requested
  Processing
  Repairing
  Repaired
  Returned
  Canceled
}

enum warranty_request_status {
  Pending
  Approved
  Rejected
  Completed
}

enum return_status {
  Pending
  Approved
  Rejected
  Completed
}

enum returnticket_status {
  Requested
  Processing
  Processed
  Returned
  Canceled
}
